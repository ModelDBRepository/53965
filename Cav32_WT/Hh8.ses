load_file("nrngui.hoc")
objectvar save_window_, rvp_
objectvar scene_vector_[6]
objectvar ocbox_, ocbox_list_, scene_, scene_list_
{ocbox_list_ = new List()  scene_list_ = new List()}
{pwman_place(0,0,0)}
{
xpanel("NEURON Main Menu", 0)
xmenu("File", 0)
xbutton("load session","load(\"*.ses\", 1)")
xbutton("load hoc","load(\"*.hoc\", 0)")
xbutton("load dll","load(\"*.dll\", 2)")
xbutton("save session","save_ses_nrnmainmenu()")
xbutton("working dir","change_working_dir()")
xmenu("recent dir", 0)
xbutton("Print","print_session(0)")
xbutton("Quit","quit()")
xmenu()
xmenu("Edit", 1)
xmenu()
xmenu("Build", 1)
xbutton("single compartment","load_file(\"single.hoc\") makesinglecompartment()")
xbutton("Cell Builder","load_file(\"celbild.hoc\") makecellbuilder()")
xmenu("NetWork Cell", 0)
xbutton("From Cell Builder","load_file(\"netbild.hoc\") makenetreadycell()")
xbutton("Artificial Cell","load_file(\"netbild.hoc\") makeartcelltype()")
xmenu()
xbutton("NetWork Builder","load_file(\"netbild.hoc\") makenetbuilder()")
xbutton("Linear Circuit","load_file(\"lincir.hoc\") makeCircuit()")
xbutton("Channel Builder","load_file(\"chanbild.hoc\", \"ChannelBuild\") chanbild()")
xmenu()
xmenu("Tools", 1)
xbutton("RunControl","nrncontrolmenu()")
xbutton("RunButton","xpanel(\"Run\") xcheckbox(\"Init & Run\", &running_,\"runbutton()\") xpanel()")
xbutton("VariableStepControl","numericalmethodpanel.map()")
xmenu("Point Processes", 0)
xmenu("Managers", 0)
xbutton("Point Manager","load_file(\"pointman.hoc\") makeppm()")
xbutton("Point Group","load_file(\"pointgrp.hoc\") makeppgm()")
xbutton("Electrode","load_file(\"electrod.hoc\") makeelectrode()")
xmenu()
xmenu("Viewers", 0)
xmenu()
xmenu("Distributed Mechanisms", 0)
xmenu("Managers", 0)
xbutton("Inserter","load_file(\"inserter.hoc\", \"Inserter\") makeinserter()")
xbutton("Homogeneous Spec","load_file(\"showmech.hoc\") makeshowmechanism()")
xmenu()
xmenu("Viewers", 0)
xbutton("celsius","celsius_panel()")
xbutton("globalRa","globalra_panel()")
xmenu()
xmenu("Fitting", 0)
xbutton("Parameterized Function","load_file(\"funfit.hoc\") makefitter()")
xbutton("Run Fitter","load_file(\"runfit.hoc\") makerunfitter()")
xbutton("Multiple Run Fitter","load_file(\"mulfit.hoc\") makemulrunfitter()")
xmenu()
xmenu("Impedance", 0)
xbutton("Frequency","load_file(\"impratio.hoc\") makeImpRatio()")
xbutton("Path","load_file(\"impedanx.hoc\") makeImpx()")
xbutton("log(A) vs x","load_file(\"logax.hoc\") makelogax()")
xbutton("Shape","load_file(\"attshape.hoc\") makeImpShape()")
xmenu()
xbutton("Model View","load_file(\"mview.hoc\", \"ModelView\") execute(\"mview()\")")
xmenu("Miscellaneous", 0)
xmenu()
xmenu("Graph", 1)
xbutton("Voltage axis","newPlotV()")
xbutton("Current axis","newPlotI()")
xbutton("State axis","newPlotS()")
xbutton("Shape plot","newshapeplot()")
xbutton("Vector movie","newvectorplot()")
xbutton("Phase Plane","newphaseplane()")
xbutton("Grapher","load_file(\"grapher.hoc\") makegrapher(1)")
xmenu()
xmenu("Vector", 1)
xbutton("Save to File","load_file(\"stdlib.hoc\",\"clipboard_save\") clipboard_save()")
xbutton("Retrieve from File","load_file(\"stdlib.hoc\",\"clipboard_retrieve\") clipboard_retrieve()")
xbutton("Gather Values","load_file(\"gatherv.hoc\") makeGatherVec()")
xbutton("Play","load_file(\"vplay.hoc\") makeVectorPlay()")
xbutton("Display","load_file(\"vecwrap.hoc\") makeVecWrap()")
xbutton("Draw","load_file(\"mkcurve.hoc\") makeMakeCurve()")
xmenu()
xmenu("Window", 1)
xpanel(0,0)
}
{
xpanel("RunControl", 0)
v_init = -70
xvalue("Init","v_init", 1,"stdinit()", 1, 1 )
xbutton("Init & Run","run()")
xbutton("Stop","stoprun=1")
runStopAt = 600
xvalue("Continue til","runStopAt", 1,"{continuerun(runStopAt) stoprun=1}", 1, 1 )
runStopIn = 1
xvalue("Continue for","runStopIn", 1,"{continuerun(t + runStopIn) stoprun=1}", 1, 1 )
xbutton("Single Step","steprun()")
t = 0
xvalue("t","t", 2 )
tstop = 600
xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
dt = 0.1
xvalue("dt","dt", 1,"setdt()", 0, 1 )
steps_per_ms = 10
xvalue("Points plotted/ms","steps_per_ms", 1,"setdt()", 0, 1 )
xcheckbox("Quiet",&stdrun_quiet,"")
realtime = 0
xvalue("Real Time","realtime", 0,"", 0, 1 )
xpanel(151,60)
}

//Begin I/V Clamp Electrode
{
load_template("Electrode")}
{
ocbox_=new Electrode(0)
execute("can_locate=1 sec=\"dend1[1]\" xloc=1 locate(0)", ocbox_)
execute("vc.dur[0]=0.1 vc.amp[0]=-65", ocbox_)
execute("vc.dur[1]=5 vc.amp[1]=10", ocbox_)
execute("vc.dur[2]=100 vc.amp[2]=-65", ocbox_)
execute("stim.del=0 stim.dur=300 stim.amp=-0.3", ocbox_)
execute("samp=stim.amp  store_vclamp() glyph()", ocbox_)
ocbox_ = ocbox_.v1
ocbox_.map("I/V Clamp Electrode", 456, 67, 215.1, 306)
}
objref ocbox_
//End I/V Clamp Electrode

{
save_window_ = new Graph(0)
save_window_.size(100,600,-120,40)
scene_vector_[3] = save_window_
{save_window_.view(100, -120, 500, 160, -4, 494, 910.8, 229.6)}
graphList[0].append(save_window_)
save_window_.save_name("graphList[0].")
save_window_.addvar("soma.v(0.5)", 1, 0, 0.8, 0.9, 2)
}
{
save_window_ = new Graph(0)
save_window_.size(100,600,-120,40)
scene_vector_[4] = save_window_
{save_window_.view(100, -120, 500, 160, 812, 75, 300.6, 200.8)}
graphList[0].append(save_window_)
save_window_.save_name("graphList[0].")
save_window_.addvar("dend1[0].v(0.5)", 1, 0, 0.8, 0.9, 2)
}
{
save_window_ = new Graph(0)
save_window_.size(100,600,-120,40)
scene_vector_[5] = save_window_
{save_window_.view(100, -120, 500, 160, 811, 2, 300.6, 200.8)}
graphList[0].append(save_window_)
save_window_.save_name("graphList[0].")
save_window_.addvar("dend1[1].v(0.5)", 1, 0, 0.8, 0.9, 2)
}
objectvar scene_vector_[1]
{doNotify()}
